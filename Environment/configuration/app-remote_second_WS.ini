# Basic Settings
# Data inputs are absolute, data outputs are relative (for easier syncing and access)
[SETTINGS]
raw_input_path = /home/rahadi/Projects/EVCC/kshroer/EV_Charging_Clusters/Data/
caching_path = /home/rahadi/Projects/EVCC/kshroer/EV_Charging_Clusters/Cache/
#raw_input_path = /home/kschroer/Documents/Research/EV_Charging_Clusters/Data/
#caching_path = /home/kschroer/Documents/Research/EV_Charging_Clusters/Cache/
raw_output_save_path = ./Utilities/raw_output/
visuals_save_path= ./Utilities/visuals_output/
log_level = INFO

# File to Environment Bounding Box
[ENVIRONMENT]
#name of scenario (appears as postfix in output file names)
post_fix= Facility_1_PopulationExp_TA_Tr_Prices
#season parameters
summer_start_date = 2019-04-29
summer_end_date = 2019-10-06
sim_season = Summer,Winter
#date 2019-06-03 (if start day is chose)
sim_start_day = False
#days
sim_duration = 1
#which day types to consider
day_types = Workday,Saturday,Sunday
# min_costs, max_profits
objective = max_profits

# Charging/Parking Requests
[REQUESTS]
#which facility to sample parking requests from. Available choice [Facility_1,Facility_2,Facility_3,Facility_4,Facility_5,Facility_6,Facility_KoeBogen]
facility = Facility_3
#share of EVs in total population
ev_share = 5, 5, 8, 8, 12, 12, 18, 18, 27, 27, 37, 37, 42, 42, 49, 49, 56, 56, 65, 65
#region for undelying EV population
region = CA
# artificially limit daily requests to a specific number
limit_daily_requests_yn = True
# how charging demand is generated; select from [charging_demand_data,travel_demand_data]
demand_gen_approach = charging_demand_data

# Facility Attributes
[INFRASTRUCTURE]
#limits maximum occupancy to that parking
parking_capa = 200
# number of chargers
num_charger = 0, 0, 0, 20, 50, 100
#connectors per charger
num_connector = 1
#all in kW
charger_power_fast = 50
charger_power_slow = 22
num_transformer = 0
grid_capa = 0
#1.2 maximum load
min_facility_baseload = 75
;75
max_facility_baseload = 250
;250
;min_facility_baseload = 188
;max_facility_baseload = 560
installed_capa_PV = 600
#all in kWh
installed_storage = 500

# Operator Configurations
[OPERATOR]
#routing decisions
    # choose from: perfect_info, random, lowest_occupancy_first, lowest_utilization_first, fill_one_after_other,
    # matching_supply_demand, minimum_power_requirement
routing_algo = minimum_power_requirement
#charging decisions
    # choose from: perfect_info, uncontrolled, first_come_first_served, earliest_deadline_first, least_laxity_first, equal_sharing,
        # online_myopic, online_multi_period, integrated_storage, dynamic, dynamic_multi_agent, average_power
charging_algo = average_power
#storage decision
# choose from: temporal_arbitrage, peak_shaving
storage_algo = peak_shaving
# how is a planning period defined (in sim time)
scheduling_mode = discrete_time
# at which intervals (in unit sim time) to do the routing/charging re-planning
planning_interval = 59
# how long a period is in the optimization (in unit sim time)
optimization_period_length = 15
# how much foresight in operations (in optimization periods)?, only relevant for dynamic model!
num_lookahead_planning_periods = 24
# Charging service level
service_level=1

minimum_served_demand = 1

penalty_for_missed_kWh = 0.5
# Investment Costs
[CAPEX]
maintenance_cost = 0.05
charger_cost_standard_one = 4500, 4500, 4322, 4322, 4151, 4151, 3986, 3986, 3828, 3828, 3577, 3677, 3531, 3531,
                                  3391, 3391,
                                  3257, 3257, 3128, 3128
charger_cost_fast_one = 50000, 50000, 49000, 49000, 47060, 47060, 45196, 45196, 43406, 43406, 41687, 41687,
                                  40037, 40037, 38451, 38451, 36928, 36928, 35466, 35466
connector_cost_standard = 250
connector_cost_fast = 2500
#USD/kW
transformer_cost = 50000, 50000, 55200, 55200, 60800, 60800, 67000, 67000, 73800, 73800, 81400, 81400, 89800, 89800, 99000, 99000, 109200, 109200, 120400, 120400
grid_expansion_cost = 250, 250, 276, 276, 304, 304, 335, 335, 369, 369, 407, 407, 449, 449, 495, 495, 546, 546, 602, 602
pv_cost = 2125, 2125, 2041, 2041, 1960, 1960, 1882, 1882, 1808, 1808, 1736, 1736, 1668, 1668, 1601, 1601, 1538,
                 1538, 1477, 1477
battery_cost = 575, 575, 507, 507, 441, 441, 391, 391, 352, 352, 321, 321, 295, 295, 273, 273, 255, 255, 239, 239

# Operational Costs
[OPEX]
#USD/kWh
;hourly_energy_costs = 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 23, 23, 23, 23, 23, 23, 8, 8
;hourly_energy_costs = 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 150, 150, 150, 150, 150, 150, 150, 150, 150, 8, 8, 8
;hourly_energy_costs = 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
hourly_energy_costs = 8, 8, 8, 8, 8, 23, 23, 23, 23, 23, 23, 8, 8, 8, 8, 8, 23, 23, 23, 23, 23, 23, 8, 8
#USD/kW
monthly_peak_cost = 15.84
#15.84

